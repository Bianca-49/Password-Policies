#include<iostream>
#include<vector>
#include<cmath>
#include<string>
#include<algorithm>
using namespace std;

class Policy{
protected:
    bool isChecked;
public:
    virtual void check(const string & parola_verif)=0;
    bool getCheck()const{ return isChecked;}
};

class LengthPolicy: public Policy{
 private:
    uint16_t minLength,maxLength;
public:
   LengthPolicy(uint16_t val_min):minLength(val_min),maxLength(255){}
   LengthPolicy(uint16_t val_min,uint16_t val_max):minLength(val_min),maxLength(val_max){}
   virtual void check(const string & parola_verif){
       if(parola_verif.size()>=minLength&&parola_verif.size()<=maxLength)
            isChecked=true;
        else
            isChecked=false;
   }
};

class ClassPolicy:public Policy{
private:
    uint16_t minClassCount;
public:
    ClassPolicy(uint16_t minclasscount):minClassCount(minclasscount){}
    virtual void check(const string & parola_verif){
        int v1=0,v2=0,v3=0,v4=0;
        for(int i=0;i<parola_verif.size();i++)
            if(parola_verif[i]>='0'&&parola_verif[i]<='9')
                v1=1;
            else
                if(parola_verif[i]>='A'&&parola_verif[i]<='Z')
                     v2=1;
                else
                    if(parola_verif[i]>='a'&&parola_verif[i]<='z')
                        v3=1;
                    else
                        v4=1;
        if((v1+v2+v3+v4)>=minClassCount)  
            isChecked=true;
        else
            isChecked=false;
    }
    
};

class IncludePolicy:public Policy{
private:
    char characterType;
public:
    IncludePolicy(char chType):characterType(chType){}
    virtual void check(const string & parola_verif){
        isChecked=false;
        if(characterType=='a')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='a'&&parola_verif[i]<='z')
                        isChecked=true;
        if(characterType=='A')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='A'&&parola_verif[i]<='Z')
                        isChecked=true;
        if(characterType=='0')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='0'&&parola_verif[i]<='9')
                        isChecked=true;
        if(characterType=='$')
            for(int i=0;i<parola_verif.size();i++)
                 if(!isdigit(parola_verif[i])&&!isupper(parola_verif[i])&&!(islower(parola_verif[i])))
                        isChecked=true;
    }
};

class NotIncludePolicy:public Policy{
private:
    char characterType;
public:
    NotIncludePolicy(char chType):characterType(chType){}
    virtual void check(const string & parola_verif){
        int verif=1;
        if(characterType=='a')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='a'&&parola_verif[i]<='z')
                        verif=0;
        if(characterType=='A')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='A'&&parola_verif[i]<='Z')
                        verif=0;
        if(characterType=='0')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='0'&&parola_verif[i]<='9')
                        verif=0;
        if(characterType=='$')
            for(int i=0;i<parola_verif.size();i++)
                 if(parola_verif[i]>='#'&&parola_verif[i]<='&')
                        verif=0;
        if(verif==1)
             isChecked=true;
        else
            isChecked=false;
        
    }
};

class RepetitionPolicy:public Policy{
private:
    uint16_t maxCount;
public:
    RepetitionPolicy(uint16_t maxC):maxCount(maxC){}
    virtual void check(const string & parola_verif){
        uint16_t ok,k=0;
        for(int i=0;i<parola_verif.size()-1;i++){
            int j=i+1;
             ok=1;
            while(parola_verif[i]==parola_verif[j]){
                j++;
                ok++;
            }
            if(ok>maxCount)
                k++;
        }
        if(k==0)
             isChecked=true;
        else
            isChecked=false;    
    }
};

class ConsecutivePolicy:public Policy{
private:
    uint16_t maxCount;
public:
    ConsecutivePolicy(uint16_t maxC):maxCount(maxC){}
    virtual void check(const string & parola_verif){
        uint16_t ok,k=0;
        for(int i=0;i<parola_verif.size()-1;i++){
            int j=i+1;
             ok=1;
             int a=1;
            while(parola_verif[i]+a==parola_verif[j]){
                j++;
                ok++;
                a++;
            }
            if(ok>maxCount)
                k++;
        }
        if(k==0)
             isChecked=true;
        else
            isChecked=false;    
    }
};

string checkPassword(string parola_verif, vector<Policy*>politici){
    int ok=1;
    for(int i=0;i<politici.size();i++){
        politici[i]->check(parola_verif);
        if( politici[i]->getCheck()==false)
            ok=0;
    }
    if(ok==1)
        return "OK";
    else
        return "NOK";
    
        
}

int main(){
    int nr;
    cin>>nr;
    vector<Policy*>p;
    string politica;
    
    uint16_t min, max;
    char l;
    for(int i=0;i<nr;i++){
        cin>>politica;
    if(politica=="length"){
        int ok=scanf("%hd %hd",&min,&max);
        if(ok==1)
            p.push_back(new LengthPolicy(min));
        else
            p.push_back(new LengthPolicy(min,max));
            
    }
    if(politica=="class"){
       cin>>min;
        p.push_back(new ClassPolicy(min));
    }
    if(politica=="include"){
        cin>>l;
        p.push_back(new IncludePolicy(l));
    }
    if(politica=="ninclude"){
       cin>>l;
        p.push_back(new NotIncludePolicy(l));
    }
    if(politica=="repetition"){
        cin>>max;
         p.push_back(new RepetitionPolicy(max));
    }
    if(politica=="consecutive"){
        cin>>max;
         p.push_back(new ConsecutivePolicy(max));
    }
        
    }
    string parola;
    while(cin>>parola)
        cout<<checkPassword(parola,p)<<endl;
    
    return 0;
}
